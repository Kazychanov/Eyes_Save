//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KazychanovEyesSave
{
  using System;
  using System.Collections.Generic;
  using System.Windows.Media;

  public partial class Agent
  {
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
    public Agent()
    {
      this.AgentPriorityHistory = new HashSet<AgentPriorityHistory>();
      this.ProductSale = new HashSet<ProductSale>();
      this.Shop = new HashSet<Shop>();
    }
    public int ProductCountSales
    {
      get
      {
        decimal p = 0;
        foreach(ProductSale sales in ProductSale)
        {
          p += sales.Cost;
        }
        return (int)p;
      }
    }
    public int ID { get; set; }
    public int AgentTypeID { get; set; }
    public string Title { get; set; }

    public string AgentTypeTitle
    {
      get
      {
        return AgentType.Title;
      }
    }
    public string Email { get; set; }
    public string Phone { get; set; }
    public string Logo { get; set; }
    public string Address { get; set; }
    public int Priority { get; set; }
    public string DirectorName { get; set; }
    public string INN { get; set; }
    public string KPP { get; set; }

    public int Discount
    {
      get
      {
        int p;
        if (this.ProductCountSales >= 0 && this.ProductCountSales < 10000)
        {
          p = 0;
        }
        else if (this.ProductCountSales >= 10000 && this.ProductCountSales < 50000)
        {
          p = 5;
        }
        else if (this.ProductCountSales >= 50000 && this.ProductCountSales < 150000)
        {
          p = 10;
        }
        else if (this.ProductCountSales >= 150000 && this.ProductCountSales < 500000)
        {
          p = 20;
        }
        else
        {
          p = 25;
        }
        return p;
      }
    }
    public SolidColorBrush FontStyle
    {
      get
      {
        if (this.Discount > 0)
        {
          return (SolidColorBrush)new BrushConverter().ConvertFromString("LightGreen");
        }
        else
        {
          return (SolidColorBrush)new BrushConverter().ConvertFromString("White");
        }
      }
    }

    public virtual AgentType AgentType { get; set; }
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
    public virtual ICollection<AgentPriorityHistory> AgentPriorityHistory { get; set; }
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
    public virtual ICollection<ProductSale> ProductSale { get; set; }
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
    public virtual ICollection<Shop> Shop { get; set; }
  }
}
